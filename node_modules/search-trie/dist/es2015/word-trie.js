import { EMPTY } from './magic';
var put = function (node, str, value, values) {
    var nextNode;
    for (var _i = 0, str_1 = str; _i < str_1.length; _i++) {
        var c = str_1[_i];
        nextNode = node[c];
        if (!nextNode) {
            nextNode = node[c] = Object.create(EMPTY);
        }
        node = nextNode;
    }
    values.set(node, value);
    return nextNode;
};
export var searchTrie = function (trie, paths, values) {
    var node = trie;
    var lastValue;
    var lastValuePath = -1;
    // const valuePath = [];
    for (var i = 0; i < paths.length; ++i) {
        var searchPath = paths[i];
        node = node[searchPath];
        if (!node) {
            break;
        }
        var value = values.get(node);
        if (value !== undefined) {
            lastValue = value;
            lastValuePath = i;
        }
    }
    var lastIndex = lastValuePath + 1;
    return {
        value: lastValue,
        path: paths.slice(0, lastIndex),
        isComplete: lastIndex === paths.length
    };
};
/**
 * builds a "word" based search trie.
 * Optimized for long but structured inputs, like directory names
 *
 * pros:
 * - fewer steps to find solution as key name can be long
 *
 * cons:
 * - potentially more keys in single node causing hashmap speed degradation
 *
 * - input: array of {key:string[], value}
 */
export var buildWordTrie = function (lines) {
    var root = Object.create(EMPTY);
    var values = new WeakMap();
    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
        var _a = lines_1[_i], key = _a.key, value = _a.value;
        put(root, key, value, values);
    }
    return {
        get: function (word) {
            var _a = searchTrie(root, word, values), isComplete = _a.isComplete, value = _a.value;
            return isComplete ? value : undefined;
        },
        has: function (word) {
            var isComplete = searchTrie(root, word, values).isComplete;
            return isComplete;
        },
        findNearest: function (word) {
            return searchTrie(root, word, values);
        },
        put: function (word, value) {
            put(root, word, value, values);
        }
    };
};
